module keyscan(
					clk,
					reset,
					row,
					col,
					led
               );
input clk,reset;
outpu[3:0] row;
input[3:0] col;
output[3:0] led;

reg[3:0] key_value;
reg[3:0] col_reg;
reg[3:0] row_reg;

always@(posedge clk or negedge reset)//row output
	if(!reset)
	row_reg<=4'b1110;
	else if(row_reg==4'b0111)
	row_reg<=4'b1110;
	else
	row_reg<=row_reg<<1;

assign row=row_reg;
always@(posedge clk or negedge reset)//col in
	if(col!=4'd1111)begin
	col_reg<=col;
	case(row_reg,col_reg)
	8'b11101110: key_value<=4'd0;
	8'b11101101: key_value<=4'd1;
	8'b11101011: key_value<=4'd2;
	8'b11100111: key_value<=4'd3;
	8'b11011110: key_value<=4'd4;
	8'b11011101: key_value<=4'd5;
	8'b11011011: key_value<=4'd6;
	8'b11010111: key_value<=4'd7;
	8'b10111110: key_vlaue<=4'd8;
	8'b10111101: key_vlaue<=4'd9;
	8'b10111011: key_vlaue<=4'd10;
	8'b10110111: key_vlaue<=4'd11;
	8'b01111110: key_value<=4'd12;
	8'b01111101: key_value<=4'd12;
	8'b01111011: key_value<=4'd12;
	8'b01110111: key_value<=4'd12;
	default:     key_value<=key_value;
	endcase
	end
assign led=key_value;